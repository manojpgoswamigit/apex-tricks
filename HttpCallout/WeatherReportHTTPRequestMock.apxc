@isTest
global class WeatherReportHTTPRequestMock implements HttpCalloutMock {
    // Error Flag
    public Boolean errorFlg { get; set; }
 
    public WeatherReportHTTPRequestMock(Boolean errFlg) {
        this.errorFlg = errFlg;
    }
 
    global HTTPResponse respond(HTTPRequest req) {
        // Send a communication error when the Error flag is true 
        if (this.errorFlg) {
            throw new System.CalloutException('Communication Error');
        }
 
        // Call API to retrieve Weather Forecast data
        System.assert(req.getEndpoint().contains('https://api.openweathermap.org/data/2.5/weather?zip='));
        System.assertEquals('GET', req.getMethod());
 
        // Response Data
        Map<String, Object> responseMap = new Map<String, Object>();
 
        // Title Data
        responseMap.put('name', 'Austin');
 
        // Weather Forecast Data
        List<Object> descriptionList = new List<Object>();
        Map<String, Object> descriptionMap = new Map<String, Object>();
        descriptionMap.put('description', 'Clear skies');
        descriptionMap.put('main', 'Clear');
        descriptionList.add(descriptionMap);
        responseMap.put('weather', descriptionList);
 
        // Test data for temperature
        Map<String, Object> temperatureDataMap = new Map<String, Object>();
        temperatureDataMap.put('temp_max', '270');
        temperatureDataMap.put('temp_min', '291');
        responseMap.put('main', temperatureDataMap);
  
        HttpResponse res = new HttpResponse();
        res.setHeader('Content-Type', 'application/json');
        // Set JSON data in the Body
        res.setBody(JSON.serialize(responseMap));
        res.setStatusCode(200);
        return res;
    }
 
}
